// -------------------- // 
// NAMING SCHEME 
//  - Models      are PASCAL CASE           like datatypes i.e. DateTime
//  - Fields      are regular CAMEL CASE    i.e. firstName
//  - Relations   are SNAKE CASE            i.e. @relation("teacher_in_charge") [inconsistent remove maybe?]
//  - Enumerations are ALL CAPS             i.e. enum Role { ADMIN, TEACHER, STUDENT }
//  - Table Names are PLURAL                i.e. Students
//  - Column Names are SINGULAR             i.e. firstName
// -------------------- // 

// Auto generate a database diagram:
// https://github.com/notiz-dev/prisma-dbml-generator?fbclid=IwAR1XWxS0eVJ3p2HaAJtFKKc38PtgdFscBkLeIqdvSaHR7MIRiM-pVq-guP4
// Copy Paste ./prisma/dbml/schema.dbml to https://dbdiagram.io/ to generate the diagram
// I uninstalled the dependency though since it had 4 high severity vulnerabilities just reinstall every time you need it
// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["fullTextSearch", "fullTextIndex"] // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------- // 
// USER ACCOUNTS //
// -------------------- //
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum SignedStatus {
  APPROVED
  REJECTED
  PENDING
  REVISION_NEEDED
}

model SchoolYear {
  id                String   @id @default(uuid())
  yearStart         Int
  yearEnd           Int
  createdAt         DateTime @default(now())
  currentSchoolYear Boolean  @default(false)
  campus            String   @default("EASTERN VISAYAS CAMPUS")

  materialEquipmentRequestControlNumberCounter Int @default(0)
  reagentRequestControlNumberCounter           Int @default(0)
  laboratoryRequestControlNumberCounter        Int @default(0)

  materialsAdded InventoryOfMaterials[]
  equipmentAdded InventoryOfEquipment[]
  reagentsAdded  InventoryOfReagents[]

  laboratoryRequests    LaboratoryRequests[]
  equipmentRequests     EquipmentRequests[]
  materialRequests      MaterialRequests[]
  reagentRequests       ReagentRequests[]
  inventoryTransactions InventoryTransactions[]
}

model Users {
  id        String  @id @default(uuid())
  email     String
  firstName String
  lastName  String
  role      Role    @default(STUDENT)
  imageLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentProfile Students? @relation(fields: [studentsId], references: [id])
  teacherProfile Teachers? @relation(fields: [teachersId], references: [id])
  adminProfile   Admins?   @relation(fields: [adminsId], references: [id])
  studentsId     String?
  teachersId     String?
  adminsId       String?

  requests LaboratoryRequests[]

  changeRoleRequest ChangeRoleRequests[]
  notifications     Notifications[]
}

model Admins {
  id                String               @id @default(uuid())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  signature         String?              @db.MediumText
  signedRequests    LaboratoryRequests[]
  userProfile       Users[]
  ReagentRequests   ReagentRequests[]
  MaterialRequests  MaterialRequests[]
  EquipmentRequests EquipmentRequests[]
}

model Teachers {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  signature String? @db.MediumText
  unit      Units?  @relation(fields: [unitId], references: [id])
  unitId    String?

  userProfile                Users[]
  receivedLaboratoryRequests LaboratoryRequests[] @relation("teacher_in_charge")
  ReagentRequests            ReagentRequests[]
  MaterialRequests           MaterialRequests[]
  LaboratoryRequests         LaboratoryRequests[]
  EquipmentRequests          EquipmentRequests[]
}

model Students {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeSection   GradeSection? @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String?

  grade   Int?
  section String?

  userProfile Users[]
}

model ChangeRoleRequests {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String

  wantedRole Role
}

model Notifications {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isRead Boolean @default(false)
  user   Users   @relation(fields: [userId], references: [id])
  userId String

  message  String
  redirect String?
}

model GradeSection {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  grade              Int
  section            String
  students           Students[]
  laboratoryRequests LaboratoryRequests[]
}

model Units {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String
  frequencyRank      Int                  @unique @default(autoincrement())
  teachers           Teachers[]
  laboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// LABORATORIES //
// -------------------- //
model Laboratories {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  colorCode   String?

  location   LaboratoryLocations @relation(fields: [locationId], references: [id])
  locationId String

  supplies               InventoryOfMaterials[]
  equipment              InventoryOfEquipment[]
  reagents               InventoryOfReagents[]
  laboratoryReservations LaboratoryReservations[]
}

model LaboratoryLocations {
  id                           String                @id @default(uuid())
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  name                         String
  description                  String?
  laboratories                 Laboratories[]
  inventoryOfMaterials         InventoryOfMaterials? @relation(fields: [inventoryOfMaterialsSupplyId], references: [id])
  inventoryOfMaterialsSupplyId String?
  inventoryOfEquipment         InventoryOfEquipment? @relation(fields: [equipmentId], references: [id])
  equipmentId                  String?
  inventoryOfReagents          InventoryOfReagents?  @relation(fields: [reagentId], references: [id])
  reagentId                    String?
}

model LaboratoryReservations {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  controlNumber      String
  laboratoryReserved Laboratories @relation(fields: [laboratoryId], references: [id])
  laboratoryId       String
  dates              Json // { startDates: [], endDates: [] } Date: YYYY-MM-DD (prisma doesnt allow String[])
  time               Json // { startTime: [], endTime: [] } Time: HH:mm

  laboratoryRequest   LaboratoryRequests @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId String
}

// -------------------- //
// INVENTORY //
// -------------------- //
model InventoryOfMaterials {
  //Materials refer to small devices for experiments (such as breakers and test tubes) and supplies of the Laboratory Unit (Cleaning Supplies etc..)

  //Identification
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  itemName       String
  code           String? // Only provide the prefix then number increments per same name "itemName" and "description"
  description    String?
  classification String?
  unit           String //Unit of measurement like "mL", "mg", etc..
  supplier       String?
  dateReceived   DateTime?
  available      Boolean   @default(true)

  //Quantity
  quantity           Int     @default(1)
  currentlyInUse     Int     @default(0)
  additionalPurchase Int?
  make               String?
  unitCost           Float?
  damage             String?
  balancePerCard     Int?
  balancePerCount    Int?

  //Location
  location       LaboratoryLocations[]
  laboratories   Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId String?

  //Related Requests
  requests              MaterialRequests[]
  schoolYear            SchoolYear?             @relation(fields: [schoolYearId], references: [id])
  schoolYearId          String?
  inventoryTransactions InventoryTransactions[]
}

model InventoryOfEquipment {
  //Equipment refer to objects that you operate

  //Identification
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  code                  String? // Only provide the prefix then number increments per same name "equipmentName" and "description"
  equipmentName         String
  description           String?
  available             Boolean   @default(true)
  serialNumber          String?
  modelNoOrManufacturer String?
  quantity              Int?      @default(1)
  currentlyInUse        Int?      @default(0)
  unit                  String?
  unitCost              Float?
  dateReceived          DateTime?
  propertyNumber        String?
  acquisitionType       String?
  supplier              String?
  status                String?

  //Location
  location       LaboratoryLocations[]
  laboratories   Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId String?

  //Related Requests
  requests              EquipmentRequests[]
  schoolYear            SchoolYear?             @relation(fields: [schoolYearId], references: [id])
  schoolYearId          String?
  inventoryTransactions InventoryTransactions[]
}

model InventoryOfReagents {
  //Reagents refer to all the chemicals (solid or liquid) Students can request for

  // Identification
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  casNumber        String?
  code             String? // Only provide the prefix then number increments per same name "chemicalName" and "description"
  chemicalName     String // Same name chemicals should be grouped together
  description      String? // If chemicals are the same name but have a varation (ex: acetic acid - glacial an food grade) or are in differnet bottles(?)
  classification   String?
  manufacturerName String?
  supplier         String?
  available        Boolean  @default(true)

  // Quantities 
  quantity         Float? // Assuming this means the current quantity in the inventory
  reservedQuantity Float?  @default(0) // This refers to regants that are reserved for later and hence cannot be reserved again as it is assumed that they will be consumed
  unit             String? // Unit of measurement like "mL", "mg", etc..

  DGClass        String?
  subRisk        String?
  PG             String?
  riskPhrase     String?
  safetyPhrase   String?
  hazSub         Boolean?
  poisonSchedule String?
  currentSDS     DateTime?
  dateReceived   DateTime?
  expiryDate     DateTime?
  dateOpened     DateTime?
  status         String?
  location       LaboratoryLocations[]
  laboratories   Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId String?

  //Related Requests
  requests              ReagentRequests[]
  schoolYear            SchoolYear?             @relation(fields: [schoolYearId], references: [id])
  schoolYearId          String?
  inventoryTransactions InventoryTransactions[]
}

model InventoryTransactions {
  id              String      @id @default(uuid())
  schoolYear      SchoolYear? @relation(fields: [schoolYearId], references: [id])
  schoolYearId    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  transactionType String // "ADD", "REMOVE", "MODIFY", etc...
  description     String?

  equipment   InventoryOfEquipment? @relation(fields: [equipmentId], references: [id])
  equipmentId String?

  material   InventoryOfMaterials? @relation(fields: [materialId], references: [id])
  materialId String?

  reagent   InventoryOfReagents? @relation(fields: [reagentId], references: [id])
  reagentId String?

  quantityBeforeChange Float
  quantityAfterChange  Float
  quantityOfChange     Float

  units String?
}

// -------------------- //
// REQUESTS AND RESERVATIONS //
// -------------------- //
model EquipmentRequests {
  id                    String                 @id @default(uuid())
  controlNumber         String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  quantity              Int
  equipment             InventoryOfEquipment[]
  name                  String
  description           String?
  modelNoOrManufacturer String?
  laboratoryRequest     LaboratoryRequests     @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId   String
  schoolYear            SchoolYear?            @relation(fields: [schoolYearId], references: [id])
  schoolYearId          String?

  isSignedByTeacher SignedStatus @default(PENDING)
  isSignedByAdmin   SignedStatus @default(PENDING)
  signedTeacher     Teachers?    @relation(fields: [signedTeacherId], references: [id])
  signedTeacherId   String?
  signedAdmin       Admins?      @relation(fields: [signedAdminId], references: [id])
  signedAdminId     String?
}

model MaterialRequests {
  id                  String                 @id @default(uuid())
  controlNumber       String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  quantity            Int
  materials           InventoryOfMaterials[]
  name                String
  description         String?
  laboratoryRequest   LaboratoryRequests     @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId String
  schoolYear          SchoolYear?            @relation(fields: [schoolYearId], references: [id])
  schoolYearId        String?

  isSignedByTeacher SignedStatus @default(PENDING)
  isSignedByAdmin   SignedStatus @default(PENDING)
  signedTeacher     Teachers?    @relation(fields: [signedTeacherId], references: [id])
  signedTeacherId   String?
  signedAdmin       Admins?      @relation(fields: [signedAdminId], references: [id])
  signedAdminId     String?
}

model ReagentRequests {
  id                  String                @id @default(uuid())
  controlNumber       String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  quantity            Int
  unit                String
  reagents            InventoryOfReagents[]
  name                String
  description         String?
  LaboratoryRequest   LaboratoryRequests    @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId String
  schoolYear          SchoolYear?           @relation(fields: [schoolYearId], references: [id])
  schoolYearId        String?

  isSignedByTeacher SignedStatus @default(PENDING)
  isSignedByAdmin   SignedStatus @default(PENDING)
  signedTeacher     Teachers?    @relation(fields: [signedTeacherId], references: [id])
  signedTeacherId   String?
  signedAdmin       Admins?      @relation(fields: [signedAdminId], references: [id])
  signedAdminId     String?
}

model LaboratoryRequests {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  requestor         Users    @relation(fields: [requestorId], references: [id])
  requestorId       String
  forSubject        String?
  concurrentTopic   String?
  noOfStudents      Int?
  otherGroupMembers Json?

  gradeSection   GradeSection @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String

  unit   Units  @relation(fields: [unitId], references: [id])
  unitId String

  teacherInCharge   Teachers @relation("teacher_in_charge", fields: [teacherInChargeId], references: [id])
  teacherInChargeId String

  materialsRequested MaterialRequests[]
  equipmentRequested EquipmentRequests[]
  reagentsRequested  ReagentRequests[]

  laboratoryReservations LaboratoryReservations[]

  // Independent Time and Location are for if someone else holds the labroatory reservation but they still need to request for materials, equipment, and reagents
  // Example is when the teacher reserves the Lab but students still need to make requests for the materials, equipment, and reagents needed in the class activity
  independentTime     Json?   @default("{}") // Store here all the date and time as you would reservation without filing a lab reservation
  independentLocation String? @default("")

  teacherAnnotation String? @db.MediumText
  adminAnnotation   String? @db.MediumText

  schoolYear   SchoolYear? @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
  Admins       Admins?     @relation(fields: [adminsId], references: [id])
  adminsId     String?
  Teachers     Teachers?   @relation(fields: [teachersId], references: [id])
  teachersId   String?
}
