// -------------------- // 
// NAMING SCHEME 
//  - Models      are PASCAL CASE           like datatypes i.e. DateTime
//  - Fields      are regular CAMEL CASE    i.e. firstName
//  - Relations   are SNAKE CASE            i.e. @relation("teacher_in_charge")
//  - Enumerations are ALL CAPS             i.e. enum Role { ADMIN, TEACHER, STUDENT }
//  - Table Names are PLURAL                i.e. Students
//  - Column Names are SINGULAR             i.e. firstName
// -------------------- // 

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------- // 
// USER ACCOUNTS //
// -------------------- //
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model SchoolYear {
  id        String   @id @default(uuid())
  yearStart Int
  yearEnd   Int
  createdAt DateTime @default(now())

  controlNumberCounter Int @default(0)

  // TODO: List here also all the laboratory requests that are made in this school year
}

model Users {
  id        String  @id @default(uuid())
  email     String
  firstName String
  lastName  String
  role      Role    @default(STUDENT)
  imageLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentProfile Students? @relation(fields: [studentsId], references: [id])
  teacherProfile Teachers? @relation(fields: [teachersId], references: [id])
  adminProfile   Admins?   @relation(fields: [adminsId], references: [id])
  studentsId     String?
  teachersId     String?
  adminsId       String?

  changeRoleRequest ChangeRoleRequests[]
}

model Admins {
  id             String               @id @default(uuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  signature      String?              @db.MediumText
  signedRequests LaboratoryRequests[]
  userProfile    Users[]
}

model Teachers {
  id                         String               @id @default(uuid())
  signature                  String?              @db.MediumText
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  receivedLaboratoryRequests LaboratoryRequests[] @relation("teacher_in_charge") //TODO rearrange this when i get to requests
  signedLaboratoryRequests   LaboratoryRequests[] @relation("signed_teacher")
  userProfile                Users[]
}

model Students {
  id String @id @default(uuid())

  gradeSection   GradeSection? @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String?

  grade   Int?
  section String?

  laboratoryRequests LaboratoryRequests[]
  userProfile        Users[]
}

model ChangeRoleRequests {
  id String @id @default(uuid())

  user   Users  @relation(fields: [userId], references: [id])
  userId String

  wantedRole Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeSection {
  id       String     @id @default(uuid())
  grade    Int
  section  String
  students Students[]
}

model Units {
  id                 String               @id @default(uuid())
  name               String
  frequencyRank      Int                  @unique @default(autoincrement())
  createdAt          DateTime             @default(now())
  LaboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// LABORATORIES //
// -------------------- //
model Laboratories {
  id          String  @id @default(uuid())
  name        String
  description String?

  location   LaboratoryLocations @relation(fields: [locationId], references: [id])
  locationId String

  supplies               InventoryOfMaterials[]
  equipment              InventoryOfEqupiment[]
  reagents               InventoryOfReagents[]
  laboratoryReservations LaboratoryReservations[]
}

model LaboratoryLocations {
  id                           String                @id @default(uuid())
  name                         String
  description                  String?
  createdAt                    DateTime              @default(now())
  removedAt                    DateTime?
  laboratories                 Laboratories[]
  inventoryOfMaterials         InventoryOfMaterials? @relation(fields: [inventoryOfMaterialsSupplyId], references: [id])
  inventoryOfMaterialsSupplyId String?
  inventoryOfEqupiment         InventoryOfEqupiment? @relation(fields: [equipmentId], references: [id])
  equipmentId                  String?
  inventoryOfReagents          InventoryOfReagents?  @relation(fields: [reagentId], references: [id])
  reagentId                    String?
}

model LaboratoryReservations {
  id                 String       @id @default(uuid())
  laboratoryReserved Laboratories @relation(fields: [laboratoryId], references: [id])
  laboratoryId       String
  startTime          DateTime
  endTime            DateTime

  laboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// INVENTORY //
// -------------------- //
model InventoryOfMaterials {
  //Materials refer to small devices for experiments (such as breakers and test tubes) and supplies of the Laboratory Unit (Cleaning Supplies etc..)
  id                 String                @id @default(uuid())
  itemName           String
  description        String
  additionalPurchase Int?
  make               String?
  supplier           String?
  dateReceived       DateTime?
  quantity           Int                   @default(0)
  unit               String //Unit of measurement like "mL", "mg", etc..
  unitCost           Float?
  borrowed           Int                   @default(0)
  returned           Int                   @default(0)
  damage             Int                   @default(0)
  balancePerCard     Int?
  balancePerCount    Int?
  location           LaboratoryLocations[]
  laboratories       Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId     String?
  laboratoryRequests LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId          Int?

  available Boolean @default(true)
}

model InventoryOfEqupiment {
  //Equipment refer to the large devices that may not be easily moved from one location to another
  id                    String                @id @default(uuid())
  equipmentCodeNumber   Int                   @unique @default(autoincrement()) // This is so we can have LE-1, LE-2, etc..
  equipmentCode         String?
  equipmentName         String
  serialNumber          String?
  modelNoOrManufacturer String?
  description           String?
  quantity              Int? // TODO: Double check if this matters as according to the table it will always be 1
  unit                  String?
  unitCost              Float?
  dateReceived          DateTime              @default(now()) // TODO: Change this
  propertyNumber        String?
  acquisitionType       String?
  supplier              String?
  location              LaboratoryLocations[]
  status                String?
  laboratories          Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId        String?
  laboratoryRequests    LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId             Int?

  available Boolean @default(true)
}

model InventoryOfReagents {
  //Reagents refer to all the chemicals (solid or liquid) Students can request for
  id                 String                @id @default(uuid())
  itemNumber         String? // TODO: Inquire about the incrementing of this
  casNumber          String?
  chemicalName       String
  manufacturerName   String?
  supplier           String?
  maxQuantity        String?
  DGClass            String?
  subRisk            String?
  PG                 String?
  riskPhrase         String?
  hazSub             Boolean
  poisonSchedule     String?
  currentSDS         DateTime?
  dateReceived       DateTime?
  expiryDate         DateTime?
  dateOpened         DateTime?
  status             String?
  location           LaboratoryLocations[]
  laboratories       Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId     String?
  laboratoryRequests LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId          Int?

  available Boolean @default(true)
}

// -------------------- //
// REQUESTS AND RESERVATIONS //
// -------------------- //
model LaboratoryRequests {
  id              Int      @id
  requestor       Students @relation(fields: [requestorId], references: [id])
  requestorId     String
  controlNumber   String?
  schoolYear      String?
  forSubject      String?
  concurrentTopic String?

  unit   Units  @relation(fields: [unitId], references: [id])
  unitId String

  teacherInCharge   Teachers @relation("teacher_in_charge", fields: [teacherInChargeId], references: [id])
  teacherInChargeId String

  materialsNeeded InventoryOfMaterials[]
  equipmentNeeded InventoryOfEqupiment[]
  Reagents_Needed InventoryOfReagents[]

  Laboratory_Reservation    LaboratoryReservations @relation(fields: [Laboratory_Reservation_Id], references: [id])
  Laboratory_Reservation_Id String

  otherGroupMembers Json?
  isSignedByTeacher Boolean  @default(false)
  isSignedByAdmin   Boolean  @default(false)
  signedTeacher     Teachers @relation("signed_teacher", fields: [signedTeacherId], references: [id])
  signedTeacherId   String
  signedAdmin       Admins   @relation(fields: [signedAdminId], references: [id])
  signedAdminId     String
}
