generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  Admin_Id            Int                   @id
  Admin_Email         String?               @db.VarChar(255)
  Admin_Firstname     String?               @db.VarChar(255)
  Admin_Lastname      String?               @db.VarChar(255)
  Admin_Signature     Int?
  laboratory_requests laboratory_requests[]
}

model equipment_request {
  Equipment_Request_Id Int  @id
  Requested_Equipment  Int?
}

model grade_section {
  GradeSection_ID Int        @id
  Grade           Int?
  Section         String?    @db.VarChar(255)
  students        students[]
}

model laboratories {
  Laboratory_Id                  Int                              @id
  Laboratory_Name                String?                          @db.VarChar(255)
  Laboratory_Location            Int?
  locations                      locations?                       @relation(fields: [Laboratory_Location], references: [Location_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratories_ibfk_1")
  laboratory_to_equipment_bridge laboratory_to_equipment_bridge[]

  @@index([Laboratory_Location], map: "Laboratory_Location")
}

model laboratory_equipment_inventory {
  Laboratory_Equipment_Id        Int                              @id
  Equipment_Code                 String?                          @db.VarChar(255)
  Equipment_Name                 String?                          @db.VarChar(255)
  Serial_Number                  String?                          @db.VarChar(255)
  Model_No__Manufacturer         String?                          @map("Model No./Manufacturer") @db.VarChar(255)
  Description                    String?                          @db.VarChar(511)
  Quantity                       Int?
  Unit                           String?                          @db.VarChar(255)
  Unit_Cost                      Float?                           @db.Float
  Date_Received                  DateTime?                        @db.DateTime(0)
  Property_Number                String?                          @db.VarChar(511)
  Acquisition_Type               String?                          @db.VarChar(255)
  Supplier                       String?                          @db.VarChar(255)
  Location                       Int?
  Status                         String?                          @db.VarChar(511)
  locations                      locations?                       @relation(fields: [Location], references: [Location_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_equipment_inventory_ibfk_1")
  laboratory_to_equipment_bridge laboratory_to_equipment_bridge[]

  @@index([Location], map: "Location")
}

model laboratory_requests {
  Request_Id                                               Int       @id
  Requestor_Id                                             Int?
  Control_Number                                           String?   @db.VarChar(255)
  School_Year                                              String?   @db.VarChar(255)
  For_Subject                                              String?   @db.VarChar(255)
  Concurrent_Topic                                         String?   @db.VarChar(255)
  Unit                                                     String?   @db.VarChar(255)
  Teacher_In_Charge                                        Int?
  Materials_Needed                                         Int?
  Equipment_Needed                                         Int?
  Reagents_Needed                                          Int?
  Laboratory_Reservation                                   Int?
  Other_Group_Members                                      Int?
  Is_Signed_By_Teacher                                     Boolean?
  Is_Signed__By_Admin                                      Boolean?  @map("Is_Signed _By_Admin")
  Signed_Teacher                                           Int?
  Signed_Admin                                             Int?
  students                                                 students? @relation(fields: [Requestor_Id], references: [Student_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_requests_ibfk_1")
  teachers_laboratory_requests_Signed_TeacherToteachers    teachers? @relation("laboratory_requests_Signed_TeacherToteachers", fields: [Signed_Teacher], references: [Teacher_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_requests_ibfk_2")
  admins                                                   admins?   @relation(fields: [Signed_Admin], references: [Admin_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_requests_ibfk_3")
  teachers_laboratory_requests_Teacher_In_ChargeToteachers teachers? @relation("laboratory_requests_Teacher_In_ChargeToteachers", fields: [Teacher_In_Charge], references: [Teacher_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_requests_ibfk_4")

  @@index([Requestor_Id], map: "Requestor_Id")
  @@index([Signed_Admin], map: "Signed_Admin")
  @@index([Signed_Teacher], map: "Signed_Teacher")
  @@index([Teacher_In_Charge], map: "Teacher_In_Charge")
}

model laboratory_to_equipment_bridge {
  Laboratory_to_Equipment_Bridge_Id Int                             @id
  Laboratory_Id                     Int?
  Laboratory_Equipment_Id           Int?
  Date_Equipment_Added              DateTime?                       @db.DateTime(0)
  Date_Equipment_Removed            DateTime?                       @db.DateTime(0)
  laboratories                      laboratories?                   @relation(fields: [Laboratory_Id], references: [Laboratory_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_to_equipment_bridge_ibfk_1")
  laboratory_equipment_inventory    laboratory_equipment_inventory? @relation(fields: [Laboratory_Equipment_Id], references: [Laboratory_Equipment_Id], onDelete: NoAction, onUpdate: NoAction, map: "laboratory_to_equipment_bridge_ibfk_2")

  @@index([Laboratory_Equipment_Id], map: "Laboratory_Equipment_Id")
  @@index([Laboratory_Id], map: "Laboratory_Id")
}

model locations {
  Location_Id                    Int                              @id
  Location_Name                  String?                          @db.VarChar(255)
  Location_Description           String?                          @db.VarChar(511)
  Date_Location_Added            DateTime?                        @db.DateTime(0)
  Date_Location_Removed          DateTime?                        @db.DateTime(0)
  laboratories                   laboratories[]
  laboratory_equipment_inventory laboratory_equipment_inventory[]
}

model materials_request {
  Materials_Request_Id Int  @id
  Requested_Materials  Int?
}

model students {
  Student_Id              Int                   @id
  Student_Email           String?               @db.VarChar(255)
  Student_Firstname       String?               @db.VarChar(255)
  Student_Lastname        String?               @db.VarChar(255)
  Student_GradeSection_ID Int?
  laboratory_requests     laboratory_requests[]
  grade_section           grade_section?        @relation(fields: [Student_GradeSection_ID], references: [GradeSection_ID], onDelete: NoAction, onUpdate: NoAction, map: "students_ibfk_1")

  @@index([Student_GradeSection_ID], map: "Student_GradeSection_ID")
}

model teacher_signatures {
  Teacher_Signature_Id Int    @id
  Teacher              Int?
  Teacher_Signature    Bytes? @db.Blob
}

model teachers {
  Teacher_Id                                                          Int                   @id
  Teacher_Email                                                       String?               @db.VarChar(255)
  Teacher_Firstname                                                   String?               @db.VarChar(255)
  Teacher_Lastname                                                    String?               @db.VarChar(255)
  Teacher_Signature                                                   Int?
  laboratory_requests_laboratory_requests_Signed_TeacherToteachers    laboratory_requests[] @relation("laboratory_requests_Signed_TeacherToteachers")
  laboratory_requests_laboratory_requests_Teacher_In_ChargeToteachers laboratory_requests[] @relation("laboratory_requests_Teacher_In_ChargeToteachers")
}
