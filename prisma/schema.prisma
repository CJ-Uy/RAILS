// -------------------- // 
// NAMING SCHEME 
//  - Models      are PASCAL CASE           like datatypes i.e. DateTime
//  - Fields      are regular CAMEL CASE    i.e. firstName
//  - Relations   are SNAKE CASE            i.e. @relation("teacher_in_charge")
//  - Enumerations are ALL CAPS             i.e. enum Role { ADMIN, TEACHER, STUDENT }
//  - Table Names are PLURAL                i.e. Students
//  - Column Names are SINGULAR             i.e. firstName
// -------------------- // 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------- // 
// USER ACCOUNTS //
// -------------------- //
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Users {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String
  lastName  String
  role      Role    @default(STUDENT)
  imageLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students   Students? @relation(fields: [studentsId], references: [id])
  teachers   Teachers? @relation(fields: [teachersId], references: [id])
  admins     Admins?   @relation(fields: [adminsId], references: [id])
  studentsId Int?
  teachersId Int?
  adminsId   Int?
}

model Admins {
  id             Int                  @id @default(autoincrement())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  signature      Bytes?               @db.Blob
  signedRequests LaboratoryRequests[]
  userProfile    Users[]
}

model Teachers {
  id                         Int                  @id @default(autoincrement())
  signature                  Bytes?               @db.Blob
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  receivedLaboratoryRequests LaboratoryRequests[] @relation("teacher_in_charge") //TODO rearrange this when i get to requests
  signedLaboratoryRequests   LaboratoryRequests[] @relation("signed_teacher")
  userProfile                Users[]
}

model Students {
  id Int @id @default(autoincrement())

  gradeSectionId   GradeSection? @relation(fields: [gradeSectionCode], references: [id])
  gradeSectionCode Int?

  grade   Int?
  section String?

  laboratoryRequests LaboratoryRequests[]
  userProfile        Users[]
}

model GradeSection {
  id       Int        @id @default(autoincrement())
  grade    Int
  section  String
  students Students[]
}

model Units {
  id                 Int                  @id @default(autoincrement())
  name               String
  LaboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// LABORATORIES //
// -------------------- //
model Laboratories {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  location   LaboratoryLocations @relation(fields: [locationId], references: [id])
  locationId Int

  supplies               InventoryOfMaterials[]
  equipment              InventoryOfEqupiment[]
  reagents               InventoryOfReagents[]
  laboratoryReservations LaboratoryReservations[]
}

model LaboratoryLocations {
  id                           Int                   @id @default(autoincrement())
  name                         String
  description                  String?
  dateAdded                    DateTime              @default(now())
  dateRemoved                  DateTime?
  laboratories                 Laboratories[]
  inventoryOfMaterials         InventoryOfMaterials? @relation(fields: [inventoryOfMaterialsSupplyId], references: [id])
  inventoryOfMaterialsSupplyId Int?
  inventoryOfEqupiment         InventoryOfEqupiment? @relation(fields: [equipmentId], references: [id])
  equipmentId                  Int?
  inventoryOfReagents          InventoryOfReagents?  @relation(fields: [reagentId], references: [id])
  reagentId                    Int?
}

model LaboratoryReservations {
  id                 Int                  @id @default(autoincrement())
  laboratoryReserved Laboratories         @relation(fields: [laboratoriesId], references: [id])
  startTime          DateTime
  endTime            DateTime
  laboratoriesId     Int
  laboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// INVENTORY //
// -------------------- //
model InventoryOfMaterials {
  //Materials refer to small devices for experiments (such as breakers and test tubes) and supplies of the Laboratory Unit (Cleaning Supplies etc..) //TODO Clarify this later
  id                 Int                   @id @default(autoincrement())
  itemName           String
  description        String
  additionalPurchase Int?
  make               String?
  supplier           String?
  dateReceived       DateTime?
  quantity           Int                   @default(0)
  unit               String //Unit of measurement like "mL", "mg", etc..
  unitCost           Float?
  borrowed           Int                   @default(0)
  returned           Int                   @default(0)
  damage             Int                   @default(0)
  balancePerCard     Int?
  balancePerCount    Int?
  location           LaboratoryLocations[]
  laboratories       Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId     Int?
  laboratoryRequests LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId          Int?
}

model InventoryOfEqupiment {
  //Equipment refer to the large devices that may not be easily moved from one location to another
  id                    Int                   @id @default(autoincrement())
  equipmentCode         String
  equipmentName         String
  serialNumber          String?
  modelNoOrManufacturer String?
  description           String?
  quantity              Int?
  unit                  String?
  unitCost              Float?
  dateReceived          DateTime              @default(now())
  propertyNumber        String?
  acquisitionType       String?
  supplier              String?
  location              LaboratoryLocations[]
  status                String?
  laboratories          Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId        Int?
  laboratoryRequests    LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId             Int?
}

model InventoryOfReagents {
  //Reagents refer to all the chemicals (solid or liquid) Students can request for
  id                 Int                   @id @default(autoincrement())
  itemNumber         String?
  casNumber          String?
  chemicalName       String
  manufacturerName   String?
  supplier           String?
  maxQuantity        String?
  DGClass            String?
  subRisk            String?
  PG                 String?
  riskPhrase         String?
  hazSub             Boolean
  poisonSchedule     String?
  currentSDS         DateTime?
  dateReceived       DateTime?
  expiryDate         DateTime?
  dateOpened         DateTime?
  status             String?
  location           LaboratoryLocations[]
  laboratories       Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId     Int?
  laboratoryRequests LaboratoryRequests?   @relation(fields: [requestId], references: [id])
  requestId          Int?
}

// -------------------- //
// REQUESTS AND RESERVATIONS //
// -------------------- //
model LaboratoryRequests {
  id              Int      @id
  requestor       Students @relation(fields: [requestorId], references: [id])
  requestorId     Int
  controlNumber   String?
  schoolYear      String?
  forSubject      String?
  concurrentTopic String?

  unit   Units @relation(fields: [unitId], references: [id])
  unitId Int

  teacherInCharge   Teachers @relation("teacher_in_charge", fields: [teacherInChargeId], references: [id])
  teacherInChargeId Int

  materialsNeeded InventoryOfMaterials[]
  equipmentNeeded InventoryOfEqupiment[]
  Reagents_Needed InventoryOfReagents[]

  Laboratory_Reservation    LaboratoryReservations @relation(fields: [Laboratory_Reservation_Id], references: [id])
  Laboratory_Reservation_Id Int

  otherGroupMembers Json?
  isSignedByTeacher Boolean  @default(false)
  isSignedByAdmin   Boolean  @default(false)
  signedTeacher     Teachers @relation("signed_teacher", fields: [signedTeacherId], references: [id])
  signedTeacherId   Int
  signedAdmin       Admins   @relation(fields: [signedAdminId], references: [id])
  signedAdminId     Int
}
