// -------------------- // 
// NAMING SCHEME 
//  - Models      are PASCAL CASE           like datatypes i.e. DateTime
//  - Fields      are regular CAMEL CASE    i.e. firstName
//  - Relations   are SNAKE CASE            i.e. @relation("teacher_in_charge") [inconsistent remove maybe?]
//  - Enumerations are ALL CAPS             i.e. enum Role { ADMIN, TEACHER, STUDENT }
//  - Table Names are PLURAL                i.e. Students
//  - Column Names are SINGULAR             i.e. firstName
// -------------------- // 

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"] // https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------- // 
// USER ACCOUNTS //
// -------------------- //
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model SchoolYear {
  id                String   @id @default(uuid())
  yearStart         Int
  yearEnd           Int
  createdAt         DateTime @default(now())
  currentSchoolYear Boolean  @default(false)
  campus            String   @default("EASTERN VISAYAS CAMPUS")

  materialEquipmentRequestControlNumberCounter Int @default(0)
  equipmentRequestControlNumberCounter         Int @default(0)
  reagentRequestControlNumberCounter           Int @default(0)
  laboratoryRequestControlNumberCounter        Int @default(0)

  materialsAdded InventoryOfMaterials[]
  equipmentAdded InventoryOfEqupiment[]
  reagentsAdded  InventoryOfReagents[]

  laboratoryRequests LaboratoryRequests[]
  EquipmentRequests  EquipmentRequests[]
  MaterialRequests   MaterialRequests[]
  ReagentRequests    ReagentRequests[]
}

model Users {
  id        String  @id @default(uuid())
  email     String
  firstName String
  lastName  String
  role      Role    @default(STUDENT)
  imageLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentProfile Students? @relation(fields: [studentsId], references: [id])
  teacherProfile Teachers? @relation(fields: [teachersId], references: [id])
  adminProfile   Admins?   @relation(fields: [adminsId], references: [id])
  studentsId     String?
  teachersId     String?
  adminsId       String?

  requests LaboratoryRequests[]

  changeRoleRequest ChangeRoleRequests[]
}

model Admins {
  id             String               @id @default(uuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  signature      String?              @db.MediumText
  signedRequests LaboratoryRequests[]
  userProfile    Users[]
}

model Teachers {
  id                         String               @id @default(uuid())
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  signature                  String?              @db.MediumText
  receivedLaboratoryRequests LaboratoryRequests[] @relation("teacher_in_charge") //TODO rearrange this when i get to requests
  signedLaboratoryRequests   LaboratoryRequests[] @relation("signed_teacher")
  userProfile                Users[]
}

model Students {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeSection   GradeSection? @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String?

  grade   Int?
  section String?

  userProfile Users[]
}

model ChangeRoleRequests {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String

  wantedRole Role
}

model GradeSection {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  grade              Int
  section            String
  students           Students[]
  laboratoryRequests LaboratoryRequests[]
}

model Units {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String
  frequencyRank      Int                  @unique @default(autoincrement())
  laboratoryRequests LaboratoryRequests[]
}

// -------------------- //
// LABORATORIES //
// -------------------- //
model Laboratories {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  location   LaboratoryLocations @relation(fields: [locationId], references: [id])
  locationId String

  supplies               InventoryOfMaterials[]
  equipment              InventoryOfEqupiment[]
  reagents               InventoryOfReagents[]
  laboratoryReservations LaboratoryReservations[]
}

model LaboratoryLocations {
  id                           String                @id @default(uuid())
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  name                         String
  description                  String?
  laboratories                 Laboratories[]
  inventoryOfMaterials         InventoryOfMaterials? @relation(fields: [inventoryOfMaterialsSupplyId], references: [id])
  inventoryOfMaterialsSupplyId String?
  inventoryOfEqupiment         InventoryOfEqupiment? @relation(fields: [equipmentId], references: [id])
  equipmentId                  String?
  inventoryOfReagents          InventoryOfReagents?  @relation(fields: [reagentId], references: [id])
  reagentId                    String?
}

model LaboratoryReservations {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  controlNumber      String
  laboratoryReserved Laboratories @relation(fields: [laboratoryId], references: [id])
  laboratoryId       String
  startTime          String // Strings but stored in the DateTime format
  endTime            String // Strings but stored in the DateTime format

  laboratoryRequest   LaboratoryRequests @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId String
}

// -------------------- //
// INVENTORY //
// -------------------- //
model InventoryOfMaterials {
  //Materials refer to small devices for experiments (such as breakers and test tubes) and supplies of the Laboratory Unit (Cleaning Supplies etc..)
  id                 String                @id @default(uuid())
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  code               String? // Only provide the prefix then number increments per same name "itemName" and "description"
  itemName           String
  description        String?
  additionalPurchase Int?
  make               String?
  supplier           String?
  dateReceived       DateTime?
  quantity           Int?                  @default(1)
  unit               String //Unit of measurement like "mL", "mg", etc..
  unitCost           Float?
  borrowed           Boolean               @default(false)
  available          Boolean               @default(true)
  damage             String?
  balancePerCard     Int?
  balancePerCount    Int?
  location           LaboratoryLocations[]
  laboratories       Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId     String?

  requests     MaterialRequests[]
  schoolYear   SchoolYear?        @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
}

model InventoryOfEqupiment {
  //Equipment refer to objects that you operate

  //Identification
  id                    String                @id @default(uuid())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  code                  String? // Only provide the prefix then number increments per same name "equipmentName" and "description"
  equipmentName         String
  description           String?
  available             Boolean               @default(true)
  serialNumber          String?
  modelNoOrManufacturer String?
  quantity              Int?                  @default(1)
  unit                  String?
  unitCost              Float?
  dateReceived          DateTime?
  propertyNumber        String?
  acquisitionType       String?
  supplier              String?
  status                String?

  //Location
  location              LaboratoryLocations[]
  laboratories          Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId        String?

  //Related Requests
  requests     EquipmentRequests[]
  schoolYear   SchoolYear?         @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
}

model InventoryOfReagents {
  //Reagents refer to all the chemicals (solid or liquid) Students can request for

  // Identification
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  casNumber        String?
  code             String? // Only provide the prefix then number increments per same name "chemicalName" and "description"
  chemicalName     String // Same name chemicals should be grouped together
  description      String? // If chemicals are the same name but have a varation (ex: acetic acid - glacial an food grade) or are in differnet bottles(?)
  classification   String?
  manufacturerName String?
  supplier         String?
  available        Boolean  @default(true)

  // Quantities
  currentQuantity Float?
  maxQuantity     Float? // Assuming this means the max quantity someone can request for
  unit            String? // Unit of measurement like "mL", "mg", etc..

  DGClass        String?
  subRisk        String?
  PG             String?
  riskPhrase     String?
  safetyPhrase   String?
  hazSub         Boolean?
  poisonSchedule String?
  currentSDS     DateTime?
  dateReceived   DateTime?
  expiryDate     DateTime?
  dateOpened     DateTime?
  status         String?
  location       LaboratoryLocations[]
  laboratories   Laboratories?         @relation(fields: [laboratoriesId], references: [id])
  laboratoriesId String?

  //Related Requests
  requests     ReagentRequests[]
  schoolYear   SchoolYear?       @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
}

// -------------------- //
// REQUESTS AND RESERVATIONS //
// -------------------- //
model EquipmentRequests {
  id                    String                 @id @default(uuid())
  controlNumber         String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  quantity              Int
  equipment             InventoryOfEqupiment[]
  name                  String
  description           String?
  modelNoOrManufacturer String?
  laboratoryRequests    LaboratoryRequests     @relation(fields: [laboratoryRequestsId], references: [id])
  laboratoryRequestsId  String
  schoolYear            SchoolYear?            @relation(fields: [schoolYearId], references: [id])
  schoolYearId          String?
}

model MaterialRequests {
  id                  String                 @id @default(uuid())
  controlNumber       String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  quantity            Int
  materials           InventoryOfMaterials[]
  name                String
  description         String?
  laboratoryRequest   LaboratoryRequests     @relation(fields: [laboratoryRequestId], references: [id])
  laboratoryRequestId String
  schoolYear          SchoolYear?            @relation(fields: [schoolYearId], references: [id])
  schoolYearId        String?
}

model ReagentRequests {
  id                   String                @id @default(uuid())
  controlNumber        String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  quantity             Int
  unit                 String
  reagents             InventoryOfReagents[]
  name                 String
  description          String?
  LaboratoryRequests   LaboratoryRequests    @relation(fields: [laboratoryRequestsId], references: [id])
  laboratoryRequestsId String
  schoolYear           SchoolYear?           @relation(fields: [schoolYearId], references: [id])
  schoolYearId         String?
}

model LaboratoryRequests {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  requestor         Users    @relation(fields: [requestorId], references: [id])
  requestorId       String
  forSubject        String?
  concurrentTopic   String?
  noOfStudents      Int?
  otherGroupMembers Json?

  gradeSection   GradeSection @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String

  unit   Units  @relation(fields: [unitId], references: [id])
  unitId String

  teacherInCharge   Teachers @relation("teacher_in_charge", fields: [teacherInChargeId], references: [id])
  teacherInChargeId String

  materialsRequested MaterialRequests[]
  equipmentRequested EquipmentRequests[]
  reagentsRequested  ReagentRequests[]

  laboratoryReservations LaboratoryReservations[]
  independentTime        Json? // Store here all the date and time as you would reservation without filing a lab reservation
  independentLocation    String? // TODO: Store the location as it could also be custom (ex: a classroom or area in the school)

  isSignedByTeacher Boolean   @default(false)
  isSignedByAdmin   Boolean   @default(false)
  signedTeacher     Teachers? @relation("signed_teacher", fields: [signedTeacherId], references: [id])
  signedTeacherId   String?
  signedAdmin       Admins?   @relation(fields: [signedAdminId], references: [id])
  signedAdminId     String?

  schoolYear   SchoolYear? @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
}
